(use '[clojure.string :only (join split)])
(-> "The Quick Brown Fox"
(split % #"\s"))
(-> "The Quick Brown Fox"
(split #"\s"))
(-> "The Quick Brown Fox"
(split #"\s")
(join "\n")
(println))
(-> "The Quick Brown Fox"
(split #"\s")
(join "\n"))
(-> "The Quick Brown Fox"
(split #"\s"))
(-> "The Quick Brown Fox"
(split #"\s")
(println ))
(-> "The Quick Brown Fox"
(split #"\s")
(join ","))
(println
         (join "\n"
           (split "The Quick Brown Fox" #"\s")))
(-> "The Quick Brown Fox"
(split #"\s")
)
(-> "The Quick Brown Fox"
(join "\n"))
(join "\n"  (split "The Quick Brown Fox" #"\s"))
(->> "The Quick Brown Fox"
(split #"\s"))
(-> "The Quick Brown Fox"
(split #"\s")
(join "\n" ))
(-> "The Quick Brown Fox"
(split #"\s")
(join "\n" %))
(-> "The Quick Brown Fox"
(split #"\s")
(#(join "\n" %)))
(-> "The Quick Brown Fox"
(split #"\s")
(#(join "\n" %))
(println))
(-> "The Quick Brown Fox"
(split #"\s")
((partial join "\n"))
(println))
(-> "The Quick Brown Fox"
(split #"\s")
(->> (join "\n"))
(println))
(repeat 3 :empty)
(vec (repeat 3 (vec (repeat 3 :empty))))
(defn new-board [n]
  (vec (repeat n (vec (repeat n "B")))))
(new-board 3)
(doc rand)
(defn lister [items]
  [:ul
   (for [item items]
     ^{:key item} [:li "Item " item])])
(defn lister-user []
  [:div
   "Here is a list:"
   [lister (range 3)]])
(lister-user)
(def skynet-widgets
  [{:basic-info {:producer-code "Cyberdyne"}
    :widgets [{:widget-code "Model-101"
               :widget-type-code "t800"}
              {:widget-code "Model-102"
               :widget-type-code "t800"}
              {:widget-code "Model-201"
               :widget-type-code "t1000"}]
    :widget-types [{:widget-type-code "t800"
                    :description "Resistance Infiltrator"}
                   {:widget-type-code "t1000"
                    :description "Mimetic polyalloy"}]}
   {:basic-info {:producer-code "ACME"}
    :widgets [{:widget-code "Dynamite"
               :widget-type-code "c40"}]
    :widget-types [{:widget-type-code "c40"
                    :description "Boom!"}]}])
(doc get-in)
(get-in skynet-widgets [:widgets])
(get-in skynet-widgets [widgets])
(get-in skynet-widgets [:basic-info])
(get-in skynet-widgets [ "0" :basic-info])
(get-in skynet-widgets [ "0"])
(get-in skynet-widgets [ 0])
(get-in skynet-widgets [ 0 :basic-info])
(get-in skynet-widgets [ 0 :widgets])
(for [{:keys [widgets widget-types basic-info]} skynet-widgets
      :let [{:keys [producer-code]} basic-info
            descriptions (into {} (for [{:keys [widget-type-code description]} widget-types]
                                    [widget-type-code description]))]
      {:keys [widget-code widget-type-code]} widgets
      :let [description (get descriptions widget-type-code)]
      :when description]
  [producer-code widget-code description])
(let [{:keys [widgets widget-types basic-info]} skynet-widgets]
(println widgets widget-types basic-info))
(let [{:keys [basic-info]} skynet-widgets]
(println basic-info))
(def gigs {:gig-01 {:id :gig-01
                            :title "Macaron"
                            :artist "Baher Khairy"
                            :desc "Sweet meringue-based rhythms with smooth and sweet injections of soul"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/baher-khairy-97645.jpg"
                            :price 1000
                            :sold-out false}
                   :gig-02 {:id :gig-02
                            :title "Stairs"
                            :artist "Brentr De Ranter"
                            :desc "Stairs to the highets peaks of music."
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/brent-de-ranter-426248.jpg"
                            :price 2000
                            :sold-out false}
                   :gig-03 {:id :gig-03
                            :title "Infusion"
                            :artist "Camille Couvez"
                            :desc "Introduction of a new elements of music into modern world"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/camille-couvez-424606.jpg"
                            :price 3000
                            :sold-out false}
                   :gig-04 {:id :gig-04
                            :title "Books"
                            :artist "Cesar-Viteri"
                            :desc "A book of music, exploring different music genres across last decade"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/cesar-viteri-426877.jpg"
                            :seats 40
                        e 4000
                            :sold-out false}
                   :gig-05 {:id :gig-05
                            :title "White"
                            :artist "Dan Schiumarini"
                            :desc "Vulnerability and humility exposed with Raps of Dan Schiumarini"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/dan-schiumarini-427769.jpg"
                            :price 5000
                            :sold-out false}
                   :gig-06 {:id :gig-06
                            :title "Hustin'"
                            :artist "Frank Cordoba"
                            :desc "Story of Hip Hop hustle by Frank Cordoba"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/frank-cordoba-425264.jpg"
                            :price 6000
                            :sold-out false}
                   :gig-07 {:id :gig-07
                            :ti                            :artist "Jakob Owens"
                            :desc "Get energized and ready to rock with this fresh and bright work of Jakob Owens"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/jakob-owens-393298.jpg"
                            :price 7000
                            :sold-out false}
                   :gig-08 {:id :gig-08
                            :title "Lion"
                            :artist "Jakob Puff"
                            :desc "An album of wild and brave sounds explored by Jakob Puff"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/jakob-puff-425634.jpg"
                            :price 8000
                            :sold-out false}
                   :gig-09 {:id :gig-09
                            :title "ampersand"
                            :artist "Kirstyn Paynter"
                            :desc "Connect music anpersand and enjoy find out what happens next"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552696/giggin/kirstyn-paynter-424217.jpg"
                            :price 9000
                            :sold-out false}
                   :gig-10 {:id :gig-10
                            :title "Taxi"
                            :artist "Peter Kasprzyk"
                            :desc "Taka a Taxi ride with Peter to explore different beats of the city"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552696/giggin/peter-kasprzyk-111462.jpg"
                            :price 9000
                            :sold-out false}
                   :gig-11 {:id :gig-11
                            :title "Plaza De La Juderia"
                            :artist "Quino Al"
                            :desc "Spanish rhythms from Plaza De La Juderia"
                            :img "https://res.cloudinary.com/schae/i_auto,q_auto/v1519552696/giggin/quino-al-427620.jpg"
                            :price 9000
                            :sold-out false}
                   :gig-12 {:id :gig-12
                            :title "Girl"
                            :artist "Shine Tang"
                            :desc "Shine Tang offers a grand exploration of classical music"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552696/giggin/shine-tang-425878.jpg"
                            :price 9000
                            :sold-out false}})
(def gigs {:gig-01 {:id :gig-01
                            :title "Macaron"
                            :artist "Baher Khairy"
                            :desc "Sweet meringue-based rhythms with smooth and sweet injections of soul"
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/baher-khairy-97645.jpg"
                            :price 1000
                            :sold-out false}
                   :gig-02 {:id :gig-02
                            :title "Stairs"
                            :artist "Brentr De Ranter"
                            :desc "Stairs to the highets peaks of music."
                            :img "https://res.cloudinary.com/schae/image/upload/f_auto,q_auto/v1519552695/giggin/brent-de-ranter-426248.jpg"
                            :price 2000
                            :sold-out false}})
gigs
(for [gig (vals gigs)]
(print gig))
(get-in gigs [id :title])
(get-in gigs [1 :title])
(get-in gigs [:gig-01 :title])
(defn foo 
[]
(str key))
(for [n (range 1 10)]
(str n))
(def e [:delete-event 12345])
(second e)
(doc dissoc)
(defn merge-by
  [maps k]
  (->> maps
       (map (juxt #(get % k) #(dissoc % k)))
       (into {})))
(merge-by [{"sub" false, "name" "Adhoc"} 
           {"acm" true, "list" true, "deval" true, "name" "Buyer"}] 
          "name")
(merge-by [{"sub" false, "name" "Adhoc"} 
           {"acm" true, "list" true, "deval" true, "name" "Buyer"}] 
"deval")
(doc juxt)
(def data ["a" "b" "c"])
(map-indexed (fn [i x] (str x " is item number " (inc i))) data)
(def x {
    :0 {:attrs {:attributes {:dontcare "something"
                             :1 {:attrs {:abc "some value"}}}}}
    :1 {:attrs {:attributes {:dontcare "something"
                             :1 {:attrs {:abc "some value"}}}}}
    :9 {:attrs {:attributes {:dontcare "something"
                             :5 {:attrs {:xyz "some value"}}}}}})
(vals x)
(->> x
vals)
(->> x
vals
(map #(get-in % [:attrs :attributes])))
(->> x
vals
(map #(get-in % [:attrs :attributes]))
(map vals))
(->> x
vals
(map #(get-in % [:attrs :attributes]))
(map vals)
(map #(filter map? %)))
(->> x
vals
(map #(get-in % [:attrs :attributes]))
(map vals)
(map #(filter map? %))
flatten)
(->> x
vals
(map #(get-in % [:attrs :attributes]))
(map vals)
(map #(filter map? %))
flatten
(map vals))
(->> x
vals
(map #(get-in % [:attrs :attributes]))
(map vals)
(map #(filter map? %))
flatten
(map vals)
flatten
)
(->> x
vals
(map #(get-in % [:attrs :attributes]))
(map vals)
(map #(filter map? %))
flatten
(map vals)
flatten
frequencies)
(filter odd? [1 3 14])
(-> [1 3 14]
(filter odd?))
(->> [1 3 14]
(filter odd?))
(->> [1 3 14]
(filter odd?)
(map inc))
(->> [1 3 14]
(filter odd?)
(map inc)
(comp))
(->> (range 20)
(filter odd?)
(map inc)
(comp))
(doc rest)
(rest [1 2 3])
(->> [1 10 21 34 12 3 4 0] 
(rest)
(first))
(defn third
[x]
((comp first rest rest) x))
(third [1 10 21 34 12 3 4 0])
